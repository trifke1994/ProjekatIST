//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Klijent.BiskopServis {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Rezervacija", Namespace="Opa")]
    [System.SerializableAttribute()]
    public partial class Rezervacija : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KorisnickoImeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime datum_istekaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime datum_kreiranjaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int id_kartaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int id_projekcijaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int id_rezervacijaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KorisnickoIme {
            get {
                return this.KorisnickoImeField;
            }
            set {
                if ((object.ReferenceEquals(this.KorisnickoImeField, value) != true)) {
                    this.KorisnickoImeField = value;
                    this.RaisePropertyChanged("KorisnickoIme");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime datum_isteka {
            get {
                return this.datum_istekaField;
            }
            set {
                if ((this.datum_istekaField.Equals(value) != true)) {
                    this.datum_istekaField = value;
                    this.RaisePropertyChanged("datum_isteka");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime datum_kreiranja {
            get {
                return this.datum_kreiranjaField;
            }
            set {
                if ((this.datum_kreiranjaField.Equals(value) != true)) {
                    this.datum_kreiranjaField = value;
                    this.RaisePropertyChanged("datum_kreiranja");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id_karta {
            get {
                return this.id_kartaField;
            }
            set {
                if ((this.id_kartaField.Equals(value) != true)) {
                    this.id_kartaField = value;
                    this.RaisePropertyChanged("id_karta");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id_projekcija {
            get {
                return this.id_projekcijaField;
            }
            set {
                if ((this.id_projekcijaField.Equals(value) != true)) {
                    this.id_projekcijaField = value;
                    this.RaisePropertyChanged("id_projekcija");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id_rezervacija {
            get {
                return this.id_rezervacijaField;
            }
            set {
                if ((this.id_rezervacijaField.Equals(value) != true)) {
                    this.id_rezervacijaField = value;
                    this.RaisePropertyChanged("id_rezervacija");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Projekcija", Namespace="http://schemas.datacontract.org/2004/07/ProjekatIST.Model")]
    [System.SerializableAttribute()]
    public partial class Projekcija : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BrojMestaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NazivField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SalaField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime VremeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int id_projekcijaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BrojMesta {
            get {
                return this.BrojMestaField;
            }
            set {
                if ((this.BrojMestaField.Equals(value) != true)) {
                    this.BrojMestaField = value;
                    this.RaisePropertyChanged("BrojMesta");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Naziv {
            get {
                return this.NazivField;
            }
            set {
                if ((object.ReferenceEquals(this.NazivField, value) != true)) {
                    this.NazivField = value;
                    this.RaisePropertyChanged("Naziv");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Sala {
            get {
                return this.SalaField;
            }
            set {
                if ((this.SalaField.Equals(value) != true)) {
                    this.SalaField = value;
                    this.RaisePropertyChanged("Sala");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Vreme {
            get {
                return this.VremeField;
            }
            set {
                if ((this.VremeField.Equals(value) != true)) {
                    this.VremeField = value;
                    this.RaisePropertyChanged("Vreme");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id_projekcija {
            get {
                return this.id_projekcijaField;
            }
            set {
                if ((this.id_projekcijaField.Equals(value) != true)) {
                    this.id_projekcijaField = value;
                    this.RaisePropertyChanged("id_projekcija");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BiskopServis.IBioskop")]
    public interface IBioskop {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/Prijava", ReplyAction="http://tempuri.org/IBioskop/PrijavaResponse")]
        bool Prijava(string korisnickoIme, string lozinka);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/Prijava", ReplyAction="http://tempuri.org/IBioskop/PrijavaResponse")]
        System.Threading.Tasks.Task<bool> PrijavaAsync(string korisnickoIme, string lozinka);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/slobodnaIZauzetaMesta", ReplyAction="http://tempuri.org/IBioskop/slobodnaIZauzetaMestaResponse")]
        System.Collections.Generic.Dictionary<string, int> slobodnaIZauzetaMesta(int projekcija);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/slobodnaIZauzetaMesta", ReplyAction="http://tempuri.org/IBioskop/slobodnaIZauzetaMestaResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> slobodnaIZauzetaMestaAsync(int projekcija);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/RezervacijaKarte", ReplyAction="http://tempuri.org/IBioskop/RezervacijaKarteResponse")]
        bool RezervacijaKarte(int projekcijaId, string korisnickoIme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/RezervacijaKarte", ReplyAction="http://tempuri.org/IBioskop/RezervacijaKarteResponse")]
        System.Threading.Tasks.Task<bool> RezervacijaKarteAsync(int projekcijaId, string korisnickoIme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/UnosKarata", ReplyAction="http://tempuri.org/IBioskop/UnosKarataResponse")]
        bool UnosKarata(int projekcija_id, double cena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/UnosKarata", ReplyAction="http://tempuri.org/IBioskop/UnosKarataResponse")]
        System.Threading.Tasks.Task<bool> UnosKarataAsync(int projekcija_id, double cena);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/RezervacijeKojeIsticu", ReplyAction="http://tempuri.org/IBioskop/RezervacijeKojeIsticuResponse")]
        Klijent.BiskopServis.Rezervacija[] RezervacijeKojeIsticu();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/RezervacijeKojeIsticu", ReplyAction="http://tempuri.org/IBioskop/RezervacijeKojeIsticuResponse")]
        System.Threading.Tasks.Task<Klijent.BiskopServis.Rezervacija[]> RezervacijeKojeIsticuAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/UnosProjekcija", ReplyAction="http://tempuri.org/IBioskop/UnosProjekcijaResponse")]
        bool UnosProjekcija(string naziv, int sala, System.DateTime vreme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/UnosProjekcija", ReplyAction="http://tempuri.org/IBioskop/UnosProjekcijaResponse")]
        System.Threading.Tasks.Task<bool> UnosProjekcijaAsync(string naziv, int sala, System.DateTime vreme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/IzmenaProjekcije", ReplyAction="http://tempuri.org/IBioskop/IzmenaProjekcijeResponse")]
        bool IzmenaProjekcije(int idproj, string noviNaziv, int novaSala, System.DateTime novoVreme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/IzmenaProjekcije", ReplyAction="http://tempuri.org/IBioskop/IzmenaProjekcijeResponse")]
        System.Threading.Tasks.Task<bool> IzmenaProjekcijeAsync(int idproj, string noviNaziv, int novaSala, System.DateTime novoVreme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/UnosKorisnika", ReplyAction="http://tempuri.org/IBioskop/UnosKorisnikaResponse")]
        bool UnosKorisnika(string korisnik, string lozinka);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/UnosKorisnika", ReplyAction="http://tempuri.org/IBioskop/UnosKorisnikaResponse")]
        System.Threading.Tasks.Task<bool> UnosKorisnikaAsync(string korisnik, string lozinka);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/IzmenaKorisnika", ReplyAction="http://tempuri.org/IBioskop/IzmenaKorisnikaResponse")]
        bool IzmenaKorisnika(string korisnik, string novoIme, string novaLozinka);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/IzmenaKorisnika", ReplyAction="http://tempuri.org/IBioskop/IzmenaKorisnikaResponse")]
        System.Threading.Tasks.Task<bool> IzmenaKorisnikaAsync(string korisnik, string novoIme, string novaLozinka);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/VratiProjekcije", ReplyAction="http://tempuri.org/IBioskop/VratiProjekcijeResponse")]
        Klijent.BiskopServis.Projekcija[] VratiProjekcije();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/VratiProjekcije", ReplyAction="http://tempuri.org/IBioskop/VratiProjekcijeResponse")]
        System.Threading.Tasks.Task<Klijent.BiskopServis.Projekcija[]> VratiProjekcijeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/VratiKorisnikoveRezervacije", ReplyAction="http://tempuri.org/IBioskop/VratiKorisnikoveRezervacijeResponse")]
        Klijent.BiskopServis.Rezervacija[] VratiKorisnikoveRezervacije(string korisnickoIme);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBioskop/VratiKorisnikoveRezervacije", ReplyAction="http://tempuri.org/IBioskop/VratiKorisnikoveRezervacijeResponse")]
        System.Threading.Tasks.Task<Klijent.BiskopServis.Rezervacija[]> VratiKorisnikoveRezervacijeAsync(string korisnickoIme);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBioskopChannel : Klijent.BiskopServis.IBioskop, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BioskopClient : System.ServiceModel.ClientBase<Klijent.BiskopServis.IBioskop>, Klijent.BiskopServis.IBioskop {
        
        public BioskopClient() {
        }
        
        public BioskopClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BioskopClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BioskopClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BioskopClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Prijava(string korisnickoIme, string lozinka) {
            return base.Channel.Prijava(korisnickoIme, lozinka);
        }
        
        public System.Threading.Tasks.Task<bool> PrijavaAsync(string korisnickoIme, string lozinka) {
            return base.Channel.PrijavaAsync(korisnickoIme, lozinka);
        }
        
        public System.Collections.Generic.Dictionary<string, int> slobodnaIZauzetaMesta(int projekcija) {
            return base.Channel.slobodnaIZauzetaMesta(projekcija);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> slobodnaIZauzetaMestaAsync(int projekcija) {
            return base.Channel.slobodnaIZauzetaMestaAsync(projekcija);
        }
        
        public bool RezervacijaKarte(int projekcijaId, string korisnickoIme) {
            return base.Channel.RezervacijaKarte(projekcijaId, korisnickoIme);
        }
        
        public System.Threading.Tasks.Task<bool> RezervacijaKarteAsync(int projekcijaId, string korisnickoIme) {
            return base.Channel.RezervacijaKarteAsync(projekcijaId, korisnickoIme);
        }
        
        public bool UnosKarata(int projekcija_id, double cena) {
            return base.Channel.UnosKarata(projekcija_id, cena);
        }
        
        public System.Threading.Tasks.Task<bool> UnosKarataAsync(int projekcija_id, double cena) {
            return base.Channel.UnosKarataAsync(projekcija_id, cena);
        }
        
        public Klijent.BiskopServis.Rezervacija[] RezervacijeKojeIsticu() {
            return base.Channel.RezervacijeKojeIsticu();
        }
        
        public System.Threading.Tasks.Task<Klijent.BiskopServis.Rezervacija[]> RezervacijeKojeIsticuAsync() {
            return base.Channel.RezervacijeKojeIsticuAsync();
        }
        
        public bool UnosProjekcija(string naziv, int sala, System.DateTime vreme) {
            return base.Channel.UnosProjekcija(naziv, sala, vreme);
        }
        
        public System.Threading.Tasks.Task<bool> UnosProjekcijaAsync(string naziv, int sala, System.DateTime vreme) {
            return base.Channel.UnosProjekcijaAsync(naziv, sala, vreme);
        }
        
        public bool IzmenaProjekcije(int idproj, string noviNaziv, int novaSala, System.DateTime novoVreme) {
            return base.Channel.IzmenaProjekcije(idproj, noviNaziv, novaSala, novoVreme);
        }
        
        public System.Threading.Tasks.Task<bool> IzmenaProjekcijeAsync(int idproj, string noviNaziv, int novaSala, System.DateTime novoVreme) {
            return base.Channel.IzmenaProjekcijeAsync(idproj, noviNaziv, novaSala, novoVreme);
        }
        
        public bool UnosKorisnika(string korisnik, string lozinka) {
            return base.Channel.UnosKorisnika(korisnik, lozinka);
        }
        
        public System.Threading.Tasks.Task<bool> UnosKorisnikaAsync(string korisnik, string lozinka) {
            return base.Channel.UnosKorisnikaAsync(korisnik, lozinka);
        }
        
        public bool IzmenaKorisnika(string korisnik, string novoIme, string novaLozinka) {
            return base.Channel.IzmenaKorisnika(korisnik, novoIme, novaLozinka);
        }
        
        public System.Threading.Tasks.Task<bool> IzmenaKorisnikaAsync(string korisnik, string novoIme, string novaLozinka) {
            return base.Channel.IzmenaKorisnikaAsync(korisnik, novoIme, novaLozinka);
        }
        
        public Klijent.BiskopServis.Projekcija[] VratiProjekcije() {
            return base.Channel.VratiProjekcije();
        }
        
        public System.Threading.Tasks.Task<Klijent.BiskopServis.Projekcija[]> VratiProjekcijeAsync() {
            return base.Channel.VratiProjekcijeAsync();
        }
        
        public Klijent.BiskopServis.Rezervacija[] VratiKorisnikoveRezervacije(string korisnickoIme) {
            return base.Channel.VratiKorisnikoveRezervacije(korisnickoIme);
        }
        
        public System.Threading.Tasks.Task<Klijent.BiskopServis.Rezervacija[]> VratiKorisnikoveRezervacijeAsync(string korisnickoIme) {
            return base.Channel.VratiKorisnikoveRezervacijeAsync(korisnickoIme);
        }
    }
}
